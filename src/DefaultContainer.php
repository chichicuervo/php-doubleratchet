<?php
/**
 *
 * Copyright (C) 2017 Jason E Belich <jason@belich.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
**/

namespace jbelich\DoubleRatchet;

use Pimple\Container;

/**
 * DefaultContainer
 *
 * an extension of Pimple's Container that allows mutable defaults
 *
 * A feature of Pimple is that values generated by a Closure are not mutable.
 * This makes using Closures to generate default initial values, while allowing
 * the value to be mutable, to be impossible.  This class addresses that need.
 *
 * using a private Container for defaults, any invokable object passed in the
 * object constructor is automatically passed to the defaults object as a Pimple
 * "factory" and invoked whenever the container key is otherwise empty.
 *
 * also, any container key prepended by a dot "." accesses the defaults container
 * directly, for any ArrayAccess behavior
 */
class DefaultContainer extends Container {

    private $defaults;

    const BYPASS_PREFIX = '.';

    public function __construct(array $values = array())
    {
        $this->defaults = new Container;

        foreach ($values as $key => $value) {
            if ($value instanceof \Closure || method_exists($value, '__invoke')) {
                $this->offsetSet($key{0} == self::BYPASS_PREFIX ? $key : (self::BYPASS_PREFIX . $key), $value);
                unset($values[$key]); // we could just pass it on below, but why should we loop thru the whole array twice?
            }
        }

        parent::__construct($values);
    }

    public function offsetSet($offset, $value)
    {
        if ($offset{0} == self::BYPASS_PREFIX) {
            if ($value instanceof \Closure || method_exists($value, '__invoke')) {
                $value = $this->defaults->factory(function ($c) use ($value) {
                    return $value($this);
                });
            }
            return $this->defaults->offsetSet(substr($offset, 1), $value);
        }

        return parent::offsetSet($offset, $value);
    }

    public function offsetGet($offset)
    {
        if ($offset{0} == self::BYPASS_PREFIX) {
            return $this->defaults->offsetGet(substr($offset, 1));

        } elseif (!parent::offsetExists($offset) && $this->defaults->offsetExists($offset)) {
            parent::offsetSet($offset, $this->defaults->offsetGet($offset));
        }

        return parent::offsetGet($offset);
    }

    public function offsetExists($offset)
    {
        if ($offset{0} == self::BYPASS_PREFIX) {
            return $this->defaults->offsetExists(substr($offset, 1));
        }

        return parent::offsetExists($offset) || $this->defaults->offsetExists($offset);
    }

    public function offsetUnset($offset)
    {
        if ($offset{0} == self::BYPASS_PREFIX) {
            return $this->defaults->offsetUnset(substr($offset, 1));
        }

        return parent::offsetUnset($offset);
    }

}
